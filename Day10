//Given an array containing n distinct numbers taken from 0,1,2,....,n where one number is repeating AND one number is missing find both the missing and repeating numbers array={3,1,3}


public class FindMissingAndRepeatingNumbers {
    public static void findMissingAndRepeating(int[] nums) {
        int n = nums.length;
        long expectedSum = (n * (n + 1)) / 2;
        long expectedSquareSum = (n * (n + 1) * (2 * n + 1)) / 6;
        
        long actualSum = 0;
        long actualSquareSum = 0;
        
        for (int num : nums) {
            actualSum += num;
            actualSquareSum += (long) num * num;
        }
        
        long sumDiff = expectedSum - actualSum;
        long squareSumDiff = expectedSquareSum - actualSquareSum;
        
        // Calculate the missing number
        int missingNumber = (int) ((sumDiff + squareSumDiff) / 2);
        
        // Calculate the repeating number
        int repeatingNumber = (int) (missingNumber - sumDiff);
        
        System.out.println("Missing Number: " + missingNumber);
        System.out.println("Repeating Number: " + repeatingNumber);
    }

    public static void main(String[] args) {
        int[] array = {3, 1, 3};
        findMissingAndRepeating(array);
    }
}



/*
Calculate the Expected Sum and Sum of Squares:

expectedSum: This variable stores the expected sum of numbers from 0 to n using the formula (n * (n + 1)) / 2. This formula calculates the sum of a series of consecutive numbers.

expectedSquareSum: This variable stores the expected sum of squares of numbers from 0 to n using the formula (n * (n + 1) * (2 * n + 1)) / 6. This formula calculates the sum of the squares of a series of consecutive numbers.

Calculate the Actual Sum and Sum of Squares:

actualSum and actualSquareSum are initialized to zero. These variables will store the actual sum and sum of squares of the elements in the input array.

The code then iterates through the elements of the input array, adding each element to actualSum and the square of each element to actualSquareSum.

Find the Differences:

sumDiff is calculated as the difference between the expectedSum and the actualSum. This difference will represent the missing number plus the extra occurrence of the repeating number.

squareSumDiff is calculated as the difference between the expectedSquareSum and the actualSquareSum. This difference will represent the squares of the numbers in the series from 0 to n, including the square of the repeating number.

Calculate the Missing and Repeating Numbers:

missingNumber is calculated as (sumDiff + squareSumDiff) / 2. This will give us the value of the missing number plus the extra occurrence of the repeating number.

repeatingNumber is calculated as missingNumber - sumDiff. Since missingNumber contains both the missing and repeating numbers, subtracting sumDiff will give us the repeating number.

Print the Results:

Finally, the code prints out the missing number and the repeating number.
For the input array {3, 1, 3}, the code will calculate the missing number as 2 and the repeating number as 3. These results are printed to the console.
*/
